#include <iostream>
#include <string>
 
using namespace std;
 
//将整句话进行倒置，标点符号不倒换
void reverString(char *str,int len){           
	int j=len;
	int i=0;
	while (i<j)
	{
		char tmp=str[i];
		str[i]=str[j];
		str[j]=tmp;
		i++;
		j--;
	}
}
 
//按单词倒置
void reverWord(char *str){
	int i=0;
	int begin=0;
	int end=0;
	while (str[i])
	{
		//通过空格判断单词，记录每个单词的开头和结尾的位置，再进行倒置
		if (str[i]!=' ')
		{
			begin=i;
			while (str[i]!=' '&&str[i])
				i++;
			i=i-1;	
			end=i;			
		}
		while (begin<end)
		{
			char tmp=str[begin];
			str[begin]=str[end];
			str[end]=tmp;
			begin++;
			end--;
		}
		i++;
	}	
}
 
int main(){
	char p[]="To be or not to be, just to find to try.";
	int lenth=strlen(p)-1;

	reverString(p,lenth);
	reverWord(p);
	cout << p << endl;
    system("pause");
	return 0;
}

//#include<stdio.h>
//#include<string.h>
//#include<stdlib.h>
//void Reset(char *str,int len)
//{
//    char tmp;
//	int i=0;
//    for(i=0;i<len/2;i++)
//    {
//        tmp=str[i];
//        str[i]=str[len-1-i];
//        str[len-1-i]=str[i];
//    }
//    
//}
//int main()
//{
//    char str[100]="hello world";
//    int lenth=strlen(str);
//    int i=0;
//	Reset(str,lenth);
//	for(i=0; i<lenth-1; i++)
//	{
//		printf("%s",str[i]);
//	}
//    system("pause");
//    return 0;
//}


//#include<stdio.h>
//#include<stdlib.h>
//int main()
//{
//    int a,b;
//    int max,min;
//    scanf("%d %d",&a,&b);
//    max=a;
//    if(max<b)
//    {
//        max=b;
//        min=a;
//    }
//    else min=b;
//	if(max==0||min==0)
//    {
//		return 0;
//    }
//    if(max%min==0)
//    {
//        printf("%d",max);
//    }
//    else
//    {
//        printf("%d",max*min);
//    }
//    
//    system("pause");
//    return 0;
//}



//#include<iostream>
//using namespace std;
//class Persion
//{
//public:
//	void Print()
//	{
//		cout<< age <<endl;
//	}
//private:
//	int age;
//}
//class Student :public Persion
//{
//
//
//
//}
//#define N 100
//template<class T,size_t N>//通常情况下都是整形
////枚举
//enum Color
//{
//	red,
//	blue,
//	gery,
//}
//class Array
//{
//public:
//	T& operator[](size_t pos)
//	{
//		return a[pos];
//	}
//private:
//	T a[N];
//	size_t _size;
//};
//int main()
//{
//	//Array<int,10> a1;
//
//	system("pause");
//	return 0;
//}